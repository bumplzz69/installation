---
-
  name: Certificate setup
  block:
    -
      name: Retrieve cluster cert
      shell: "echo -n '' | openssl s_client -showcerts -connect {{ che_keycloak_host }}:{{ che_keycloak_port }} | sed -ne '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p'"
      args:
        warn: no
      register: che_ssl_cmd
    -
      name: Check if cluster cert exists
      shell: "oc get secret/openshift-identity-provider -o json -n {{ che_namespace }}"
      register: che_cert_cmd
      failed_when: false
    -
      name: Create cluster cert
      shell: "oc new-app -f {{che_cert_template}} -p CERTIFICATE='{{ che_ssl_cmd.stdout }}' -n {{ che_namespace }}"
      when: che_cert_cmd.rc != 0
  when: che_protocol == 'https' and eval_self_signed_certs|bool


-
  name: Deploy che server
  shell: "oc new-app \
          -p 'ROUTING_SUFFIX={{ che_route_suffix }}' \
          -p 'CHE_VERSION={{ che_version }}' \
          -p 'IMAGE_CHE={{ che_image_name }}' \
          -p 'PROTOCOL={{ che_protocol }}' \
          -p 'WS_PROTOCOL={{ che_ws_protocol }}' \
          -p 'TLS={{ che_tls }}' \
          -p 'CHE_MULTIUSER={{ che_multiuser }}' \
          -p 'CHE_KEYCLOAK_AUTH__SERVER__URL={{ che_protocol }}://{{ che_keycloak_host }}/auth' \
          -p 'CHE_INFRA_KUBERNETES_MASTER__URL={{ che_infra_namespace }}' \
          -p 'CHE_INFRA_KUBERNETES_PVC_STRATEGY={{ che_infra_pvc_strategy }}' \
          -p 'CHE_INFRA_KUBERNETES_PVC_QUANTITY={{ che_infra_pvc_quantity }}' \
          -f {{che_server_template}} \
          -n {{ che_namespace }}"

- name: "patch che environment variables"
  shell: "oc set env dc/che CHE_KEYCLOAK_REALM={{che_keycloak_realm}} CHE_KEYCLOAK_CLIENT__ID={{che_keycloak_client_id}} -n che"
  register: oc_cmd
  failed_when: oc_cmd.rc != 0
-
  name: "Verify che server deployment succeeded"
  shell: sleep 5; oc get pods --namespace {{ che_namespace }}  |  grep  "deploy"
  register: result
  until: not result.stdout
  retries: 50
  delay: 10
  failed_when: result.stdout
  changed_when: False
